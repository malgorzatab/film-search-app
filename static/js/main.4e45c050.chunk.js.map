{"version":3,"sources":["views/Films/Films.js","controls/SearchField.js","views/FilmSearch/FilmSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Films","films","length","className","map","film","src","Poster","alt","Title","Year","Type","imdbID","SearchField","handelSearch","useState","search","setSearch","placeholder","value","onChange","event","target","onClick","FilmSearch","setFilms","error","setError","fetch","then","res","json","data","Search","Error","catch","err","console","log","message","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAyBeA,EAtBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,qCACKA,EAAMC,OAAS,GAAK,2CACrB,qBAAKC,UAAW,OAAhB,SACKF,EAAMG,KAAI,SAAAC,GAAI,OACX,sBAAKF,UAAW,OAAhB,UACI,qBAAKG,IAAKD,EAAKE,OAAQC,IAAK,gBAC5B,sBAAKL,UAAW,cAAhB,UACI,6BAAKE,EAAKI,QACV,uCAAUJ,EAAKK,QACf,uCAAUL,EAAKM,aALMN,EAAKO,iBCavCC,EAnBK,SAAC,GAEd,IADHC,EACE,EADFA,aACE,EAC0BC,mBAAS,IADnC,mBACKC,EADL,KACaC,EADb,KAGF,OACI,qCACA,uBACIC,YAAa,qBACbC,MAAOH,EAEPI,SAAU,SAAAC,GAAK,OAAIJ,EAAUI,EAAMC,OAAOH,UAE9C,wBAAQI,QAAS,kBAAMT,EAAaE,IAApC,wBCmBOQ,EA7BI,WAAO,IAAD,EACKT,mBAAS,IADd,mBACdd,EADc,KACPwB,EADO,OAEKV,mBAAS,IAFd,mBAEdW,EAFc,KAEPC,EAFO,KAoBrB,OACI,sBAAKxB,UAAW,UAAhB,UACI,cAAC,EAAD,CAAaW,aAjBA,SAACE,GAAD,OACjBY,MAAM,8CAAD,OAA+CZ,IAC/Ca,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GACEA,EAAKC,OACLR,EAASO,EAAKC,SAEdN,EAASK,EAAKE,OACdT,EAAS,QAGhBU,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAAIG,eAMnBtC,EAAMC,OAAS,EAAI,cAAC,EAAD,CAAOD,MAAOA,IAAY,qBAAKE,UAAW,QAAhB,SAA0BuB,Q,MCfrEc,MATf,WACE,OACE,sBAAKrC,UAAU,MAAf,UACE,qBAAKA,UAAW,SAAhB,SAA0B,mDAC1B,cAAC,EAAD,QCGSsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4e45c050.chunk.js","sourcesContent":["import './Films.css';\r\n\r\n\r\nconst Films = ({ films }) => {\r\n    return (\r\n        <>\r\n            {films.length > 0 && <h2>Results: </h2>}\r\n            <div className={\"list\"}>\r\n                {films.map(film => (\r\n                    <div className={\"card\"} key={film.imdbID}>\r\n                        <img src={film.Poster} alt={\"film poster\"} />\r\n                        <div className={\"description\"}>\r\n                            <h2>{film.Title}</h2>\r\n                            <p>Year: {film.Year}</p>\r\n                            <p>Type: {film.Type}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Films;\r\n","import { useState } from 'react';\r\n\r\n\r\nconst SearchField = ({\r\n    handelSearch\r\n}) => {\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n        <input\r\n            placeholder={\"Enter film's title\"}\r\n            value={search}\r\n\r\n            onChange={event => setSearch(event.target.value)}\r\n        />\r\n        <button onClick={() => handelSearch(search)}>Search</button>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default SearchField;\r\n","import { useState } from 'react';\r\n\r\nimport Films from '../Films/Films';\r\nimport SearchField from '../../controls/SearchField';\r\n\r\n\r\nconst FilmSearch = () => {\r\n    const [films, setFilms] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const handelSearch = (search) =>\r\n        fetch(`https://www.omdbapi.com/?apikey=1d60c136&s=${search}`)\r\n            .then((res) => res.json())\r\n            .then(data => {\r\n                if (data.Search) {\r\n                    setFilms(data.Search)\r\n                } else {\r\n                    setError(data.Error);\r\n                    setFilms([]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.message)\r\n            });\r\n\r\n    return (\r\n        <div className={\"content\"}>\r\n            <SearchField handelSearch={handelSearch} />\r\n            {films.length > 0 ? <Films films={films} /> : <div className={\"error\"}>{error}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default FilmSearch;\r\n","import FilmSearch from './views/FilmSearch/FilmSearch';\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className={\"navbar\"}><h1>Film Search App</h1></nav>\n      <FilmSearch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}